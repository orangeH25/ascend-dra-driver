name: Release

# ------------------------------------------------------------
# Workflow Steps:
# 1. Run "make docker-generate" to ensure CRDs/artifacts are fresh
# 2. Build and push Docker multi-arch image (amd64 + arm64) to Quay Hub
# 3. Update Helm values.yaml and package Helm chart
# 4. Update install.sh script with the new release version
# 5. Create GitHub Release and upload Helm chart + install.sh
# ------------------------------------------------------------

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
      is_latest:
        description: 'Mark this release as latest?'
        type: boolean
        required: true
        default: false

jobs:
  release:
    runs-on: ubuntu-22.04
    env:
      IMAGE_NAME: ascend-dra-driver
      NAMESPACE: ascend-dra-driver
      REGISTRY: ${{ vars.QUAY_REGISTRY }}/${{ vars.QUAY_REPO }}
      VERSION: ${{ github.event.inputs.version }}
      IS_LATEST: ${{ github.event.inputs.is_latest }}
      OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}

    steps:
      # Checkout repo code
      - name: Checkout code
        uses: actions/checkout@v4

      # Generate CRDs / artifacts (safe to always run)
      - name: Generate build artifacts
        run: make docker-generate

      # Log in to Quay Hub
      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      # Enable Docker Buildx for multi-arch support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push multi-arch image (amd64 + arm64)
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployments/container/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          build-args: |
            GOLANG_VERSION=1.23.1
            BASE_IMAGE=docker.io/ubuntu:22.04
            VERSION=${{ env.VERSION }}

      # Verify image manifest
      - name: Check image manifest
        run: docker buildx imagetools inspect ${REGISTRY}/${IMAGE_NAME}:${VERSION}

      # Install Helm CLI
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.2

      # Update Helm chart values with release image + version
      - name: Prepare Helm values.yaml
        run: |
          sed -i "s|repository: .*|repository: ${REGISTRY}/${IMAGE_NAME}|g" deployments/helm/ascend-dra-driver/values.yaml
          sed -i "s|tag: .*|tag: ${VERSION}|g" deployments/helm/ascend-dra-driver/values.yaml

      # Package Helm chart
      - name: Package Helm chart
        run: |
          mkdir -p package
          helm package deployments/helm/ascend-dra-driver -d ./package
          mv ./package/ascend-dra-driver-*.tgz ./package/ascend-dra-driver-${VERSION}.tgz
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Helm chart package: package/ascend-dra-driver-${VERSION}.tgz"

      # Update install.sh with release variables
      - name: Update install.sh with release version
        run: |
          sed -i "0,/^VERSION=.*/s|^VERSION=.*|VERSION=${VERSION}|" install.sh
          sed -i "0,/^OWNER=.*/s|^OWNER=.*|OWNER=${OWNER}|" install.sh
          sed -i "0,/^REPO_NAME=.*/s|^REPO_NAME=.*|REPO_NAME=${REPO_NAME}|" install.sh
          sed -i "0,/^NAMESPACE=.*/s|^NAMESPACE=.*|NAMESPACE=${NAMESPACE}|" install.sh
          echo "Updated install.sh for release version ${VERSION}"

      # Update/move 'latest' Git tag if requested
      - name: Update latest tag if requested
        if: env.IS_LATEST == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f latest
          git push origin latest --force

      # Upload release assets under versioned tag
      - name: Upload Release Assets (versioned)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          files: |
            package/ascend-dra-driver-${{ env.VERSION }}.tgz
            install.sh
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload release assets also under 'latest' tag
      - name: Upload Release Assets (latest)
        if: env.IS_LATEST == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Release latest
          files: |
            package/ascend-dra-driver-${{ env.VERSION }}.tgz
            install.sh
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
